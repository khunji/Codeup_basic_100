#문제에서 설명하는 바둑알 십자 뒤집기란?
#그 위치에 있는 모든 가로줄 돌의 색을 반대(1->0, 0->1)로 바꾸기
#다시 그 위치에 있는 모든 세로줄 돌의 색을 반대로 바꾸기
#어떤 위치를 골라 십자 뒤집기를 하면, 그 위치를 제외한 가로줄과 세로줄의 색이 모두 반대로 바뀐다.

#바둑판(19*19)에 흰 돌(1) 또는 검정 돌(0)이 모두 꽉 채워져 놓여있을 때, n개의 좌표를 입력받아
#십자(+) 뒤집기한 결과를 출력해보자.


#입력: 바둑알이 깔려 있는 상황이 19*19 크기의 정숫값으로 입력된다.
#십자 뒤집기 횟수(n)가 입력된다.
#십자 뒤집기 좌표가 힛수(n)만큼 입력된다. 단, n은 10이하의 자연수이다.

#출력:십자 뒤집기 결과를 출력한다.


matrix=[]    #빈 리스트 생성

for i in range(19): #세로 크기만큼 반복  [0][0]~[18][18]
    matrix.append(list(map(int,input().split())))        #ex:i=0일 때 즉, 세로의 인덱스가 0일 때 세로에 정수형으로 엔터를 누를 때까지 공백을 기준으로 숫자를 입력받음
#2차원 리스트 완성-->19*19바둑판 입력으로 해결

n = int(input())    #십자 뒤집기 횟수 입력받기

for i in range(n):      #십자 뒤집기 횟수만큼 반복하고
    x,y = map(int,input().split())  #일단 문자열로 뒤집을 가로,세로를 입력받고-->인덱스를 입력받음
    x-=1
    y-=1
    for j in range(19): #0~18까지 19번 반복
        if matrix[j][(y)]==0:     #세로줄이 0이면
            matrix[j][(y)]=1     #1로 십자 뒤집기
        else:                   #세로줄이 0이 아니면 즉, 1이면
            matrix[j][(y)]=0     #세로줄 십자 뒤집기

        if matrix[(x)][j] == 0:   #가로줄도 세로줄과 같은 논리로
            matrix[(x)][j]=1
        else:
            matrix[(x)][j]=0
        
for i in range(19):           #바둑판 출력해주기
    for j in range(19):
        print(matrix[i][j],end=' ')
    print()


